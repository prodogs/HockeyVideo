/// <reference path="../../Video/typescript-defs/all-definitions.d.ts"/>
console.log("Loading ObjectUpdateRouter.ts ...");
class ObjectUpdateStats {
    constructor() {
        this.counter = 0;
    }
}
this.ObjectUpdateStats = ObjectUpdateStats;
class ObjectUpdateRouter extends C4Object {
    constructor() {
        super();
        ObjectUpdateRouter.observerInstance = this;
        this.handleArray = new Array();
        if (this.handleList == null)
            this.handleList = Factory.GetClassesToObserve();
        if (this.observations == null) {
            this.observations = new Array();
            for (var item in this.handleList) {
                this.observations[this.handleList[item]] = new Object();
                this.observations[this.handleList[item]] = ObjectUpdateRouter.CreateStatObject();
            }
        }
    }
    get observing() {
        return ObjectUpdateRouter._observing;
    }
    static SendObjectChange(object) {
        var changeMessage = new ObjectChangeMessage();
        //	MyApp.ObjectRouter.observations[object.classType]["change"].counter++;
        changeMessage.object = object;
        changeMessage.changeType = ObjectChangeType.Change;
        changeMessage.classType = object.classType;
        changeMessage.origin = "router";
        C4Event.emit(c4e.ObjectChanged, changeMessage);
    }
    static SendRemoveObject(id, classType) {
        var changeMessage = new ObjectChangeMessage();
        //MyApp.ObjectRouter.observations[<string>classType]["remove"].counter++;
        changeMessage.object = null;
        changeMessage.changeType = ObjectChangeType.Remove;
        changeMessage.classType = classType;
        changeMessage.origin = "router";
        changeMessage.removeID = id;
        C4Event.emit(c4e.ObjectChanged, changeMessage);
    }
    static SendAddObject(object) {
        var changeMessage = new ObjectChangeMessage();
        //MyApp.ObjectRouter.observations[object.classType]["add"].counter++;
        changeMessage.object = object;
        changeMessage.changeType = ObjectChangeType.New;
        changeMessage.classType = object.classType;
        changeMessage.origin = "router";
        C4Event.emit(c4e.ObjectChanged, changeMessage);
    }
    static StartObservations() {
        if (this._observing)
            return;
        this.observerInstance = new ObjectUpdateRouter();
        this.observerInstance.startObservations();
        return this.observerInstance;
    }
    static StopObservations() {
        this.observerInstance.stopObserve();
    }
    observe() {
        if (ObjectUpdateRouter._observing)
            return;
        this.startObservations();
    }
    static CreateStatObject() {
        var newObject = new Array();
        newObject["add"] = new ObjectUpdateStats();
        newObject["remove"] = new ObjectUpdateStats();
        newObject["change"] = new ObjectUpdateStats();
        return newObject;
    }
    startObservations() {
        ObjectUpdateRouter.observeRouterCount++;
        this.observations = new Array();
        for (var item in this.handleList) {
            console.log("Observing Class " + this.handleList[item]);
            this.observeClass(this.handleList[item]);
        }
        ObjectUpdateRouter._observing = true;
    }
    observeClass(classType) {
        var objectProxy = Factory.CreateProxyInstance(classType);
        VideoApp.assert(objectProxy != null, "Expected A Proxy and Got Null for classType = " + classType, new Error());
        var query = objectProxy.observe();
        VideoApp.assert(query != null, "Error Starting Observation = " + classType, new Error());
        this.handleArray[classType] =
            query.observeChanges({
                added: function (id, fields) {
                    var theObject = Factory.CreateProxyInstance(classType).getOne(id);
                    ObjectUpdateRouter.SendAddObject(theObject);
                },
                changed: function (id, fields) {
                    var object = Factory.CreateProxyInstance(classType).getOne(id);
                    ObjectUpdateRouter.SendObjectChange(object);
                },
                removed: function (id) {
                    UI.Info("Remove ---" + classType);
                    ObjectUpdateRouter.SendRemoveObject(id, classType);
                }
            });
    }
    stopObserve() {
        if (!ObjectUpdateRouter._observing)
            return;
        ObjectUpdateRouter.observeRouterCount--;
        for (var observations in this.handleArray) {
            this.handleArray[observations].stop();
        }
        ObjectUpdateRouter._observing = false;
    }
    destructor() {
        if (!ObjectUpdateRouter._observing)
            return;
        this.stopObserve();
    }
}
ObjectUpdateRouter.observeRouterCount = 0;
ObjectUpdateRouter.observerInstance = null;
ObjectUpdateRouter._observing = false;
this.ObjectUpdateRouter = ObjectUpdateRouter;
//# sourceMappingURL=data:application/json;base64,