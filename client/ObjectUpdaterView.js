/// <reference path="../../Video/typescript-defs/all-definitions.d.ts"/>
class ObjectUpdaterView extends UIComplexComponent {
    constructor() {
        super();
        this.setID("ObjectUpdaterView_");
        this.observationList = new Array();
        var index = 0;
        for (var classType in MyApp.ObjectRouter.observations) {
            for (var updateType in MyApp.ObjectRouter.observations[classType]) {
                var newItem = new Array();
                newItem["classType"] = classType;
                newItem["updateType"] = updateType;
                newItem["counter"] = MyApp.ObjectRouter.observations[classType][updateType].counter;
                this.observationList.push(newItem);
            }
        }
    }
    getView() {
        var dataTableComponent = new UIDataTable();
        dataTableComponent.setEditable(true);
        dataTableComponent.addColumn(0, {
            id: "classType",
            header: "Class",
            width: 150,
            sort: "string",
            editor: "text"
        });
        dataTableComponent.addColumn(1, {
            id: "updateType", header: "Update Type", width: 200, sort: "string", editor: "text"
        });
        dataTableComponent.addColumn(2, {
            id: "counter",
            header: "Count",
            width: 150,
            sort: "string",
            editor: "text"
        });
        dataTableComponent.showToolBar = (false);
        dataTableComponent.showAddDeleteColumns = false;
        console.log(JSON.stringify(this.observationList, null, 4));
        dataTableComponent.setList(this.observationList);
        this.addComponent("datatable", dataTableComponent);
        this.componentView = this.createView({
            view: "form", id: this.componentID, elements: [
                this.getComponent("datatable").getView(),
            ]
        });
        return this.componentView;
    }
    initialize() {
        super.initialize();
        super.defineEvents();
    }
}
this.ObjectUpdaterView = ObjectUpdaterView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT2JqZWN0VXBkYXRlclZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJPYmplY3RVcGRhdGVyVmlldy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3RUFBd0U7QUFLcEUsZ0NBQWdDLGtCQUFrQjtJQUk5QztRQUNJLE9BQU8sQ0FBQztRQUNSLElBQUksQ0FBQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUVqQyxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksS0FBSyxFQUFPLENBQUM7UUFDeEMsSUFBSSxLQUFLLEdBQWMsQ0FBQyxDQUFDO1FBRXpCLEdBQUcsQ0FBQyxDQUFDLElBQUksU0FBUyxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztZQUVwRCxHQUFHLENBQUMsQ0FBQyxJQUFJLFVBQVUsSUFBSSxLQUFLLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBRWhFLElBQUksT0FBTyxHQUFhLElBQUksS0FBSyxFQUFPLENBQUM7Z0JBQ3pDLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBSSxTQUFTLENBQUM7Z0JBQ2xDLE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBRyxVQUFVLENBQUM7Z0JBQ25DLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBTSxLQUFLLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUM7Z0JBQ3ZGLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRXZDLENBQUM7UUFDTCxDQUFDO0lBQ0wsQ0FBQztJQUVNLE9BQU87UUFFVixJQUFJLGtCQUFrQixHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7UUFFM0Msa0JBQWtCLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUU7WUFDNUIsRUFBRSxFQUFNLFdBQVc7WUFDbkIsTUFBTSxFQUFFLE9BQU87WUFDZixLQUFLLEVBQUcsR0FBRztZQUNYLElBQUksRUFBSSxRQUFRO1lBQ2hCLE1BQU0sRUFBRSxNQUFNO1NBQ2pCLENBQUMsQ0FBQztRQUNILGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUU7WUFDNUIsRUFBRSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTTtTQUN0RixDQUFDLENBQUM7UUFDSCxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFO1lBQzVCLEVBQUUsRUFBTSxTQUFTO1lBQ2pCLE1BQU0sRUFBRSxPQUFPO1lBQ2YsS0FBSyxFQUFHLEdBQUc7WUFDWCxJQUFJLEVBQUksUUFBUTtZQUNoQixNQUFNLEVBQUUsTUFBTTtTQUNqQixDQUFDLENBQUM7UUFDSCxrQkFBa0IsQ0FBQyxXQUFXLEdBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsRCxrQkFBa0IsQ0FBQyxvQkFBb0IsR0FBRyxLQUFLLENBQUM7UUFFaEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFM0Qsa0JBQWtCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUVqRCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBRW5ELElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztZQUNJLElBQUksRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsUUFBUSxFQUFFO2dCQUMvRSxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE9BQU8sRUFBRTthQUMzQztTQUVpQyxDQUFDLENBQUM7UUFDeEMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDOUIsQ0FBQztJQUVNLFVBQVU7UUFDYixLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDbkIsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3pCLENBQUM7QUFFTCxDQUFDO0FBQ0QsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL1ZpZGVvL3R5cGVzY3JpcHQtZGVmcy9hbGwtZGVmaW5pdGlvbnMuZC50c1wiLz5cclxuXHJcblxyXG4gICAgZGVjbGFyZSB2YXIgTXlBcHAgOiBhbnk7XHJcblxyXG4gICAgY2xhc3MgT2JqZWN0VXBkYXRlclZpZXcgZXh0ZW5kcyBVSUNvbXBsZXhDb21wb25lbnQge1xyXG5cclxuICAgICAgICBwdWJsaWMgb2JzZXJ2YXRpb25MaXN0OkFycmF5PGFueT47XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLnNldElEKFwiT2JqZWN0VXBkYXRlclZpZXdfXCIpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vYnNlcnZhdGlvbkxpc3QgPSBuZXcgQXJyYXk8YW55PigpO1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggICAgICAgICAgICA9IDA7XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBjbGFzc1R5cGUgaW4gTXlBcHAuT2JqZWN0Um91dGVyLm9ic2VydmF0aW9ucykge1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHVwZGF0ZVR5cGUgaW4gTXlBcHAuT2JqZWN0Um91dGVyLm9ic2VydmF0aW9uc1tjbGFzc1R5cGVdKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdJdGVtICAgICAgICAgICA9IG5ldyBBcnJheTxhbnk+KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3SXRlbVtcImNsYXNzVHlwZVwiXSAgPSBjbGFzc1R5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3SXRlbVtcInVwZGF0ZVR5cGVcIl0gPSB1cGRhdGVUeXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0l0ZW1bXCJjb3VudGVyXCJdICAgID0gTXlBcHAuT2JqZWN0Um91dGVyLm9ic2VydmF0aW9uc1tjbGFzc1R5cGVdW3VwZGF0ZVR5cGVdLmNvdW50ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vYnNlcnZhdGlvbkxpc3QucHVzaChuZXdJdGVtKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBnZXRWaWV3KCk6YW55IHtcclxuXHJcbiAgICAgICAgICAgIHZhciBkYXRhVGFibGVDb21wb25lbnQgPSBuZXcgVUlEYXRhVGFibGUoKTtcclxuXHJcbiAgICAgICAgICAgIGRhdGFUYWJsZUNvbXBvbmVudC5zZXRFZGl0YWJsZSh0cnVlKTtcclxuICAgICAgICAgICAgZGF0YVRhYmxlQ29tcG9uZW50LmFkZENvbHVtbigwLCB7XHJcbiAgICAgICAgICAgICAgICBpZCAgICA6IFwiY2xhc3NUeXBlXCIsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6IFwiQ2xhc3NcIixcclxuICAgICAgICAgICAgICAgIHdpZHRoIDogMTUwLFxyXG4gICAgICAgICAgICAgICAgc29ydCAgOiBcInN0cmluZ1wiLFxyXG4gICAgICAgICAgICAgICAgZWRpdG9yOiBcInRleHRcIlxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZGF0YVRhYmxlQ29tcG9uZW50LmFkZENvbHVtbigxLCB7XHJcbiAgICAgICAgICAgICAgICBpZDogXCJ1cGRhdGVUeXBlXCIsIGhlYWRlcjogXCJVcGRhdGUgVHlwZVwiLCB3aWR0aDogMjAwLCBzb3J0OiBcInN0cmluZ1wiLCBlZGl0b3I6IFwidGV4dFwiXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBkYXRhVGFibGVDb21wb25lbnQuYWRkQ29sdW1uKDIsIHtcclxuICAgICAgICAgICAgICAgIGlkICAgIDogXCJjb3VudGVyXCIsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6IFwiQ291bnRcIixcclxuICAgICAgICAgICAgICAgIHdpZHRoIDogMTUwLFxyXG4gICAgICAgICAgICAgICAgc29ydCAgOiBcInN0cmluZ1wiLFxyXG4gICAgICAgICAgICAgICAgZWRpdG9yOiBcInRleHRcIlxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZGF0YVRhYmxlQ29tcG9uZW50LnNob3dUb29sQmFyICAgICAgICAgID0gKGZhbHNlKTtcclxuICAgICAgICAgICAgZGF0YVRhYmxlQ29tcG9uZW50LnNob3dBZGREZWxldGVDb2x1bW5zID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeSh0aGlzLm9ic2VydmF0aW9uTGlzdCwgbnVsbCwgNCkpO1xyXG5cclxuICAgICAgICAgICAgZGF0YVRhYmxlQ29tcG9uZW50LnNldExpc3QodGhpcy5vYnNlcnZhdGlvbkxpc3QpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hZGRDb21wb25lbnQoXCJkYXRhdGFibGVcIiwgZGF0YVRhYmxlQ29tcG9uZW50KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50VmlldyA9IHRoaXMuY3JlYXRlVmlldyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlldzogXCJmb3JtXCIsIGlkOiB0aGlzLmNvbXBvbmVudElELCBlbGVtZW50czogW1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0Q29tcG9uZW50KFwiZGF0YXRhYmxlXCIpLmdldFZpZXcoKSxcclxuICAgICAgICAgICAgICAgIF1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50VmlldztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBpbml0aWFsaXplKCkge1xyXG4gICAgICAgICAgICBzdXBlci5pbml0aWFsaXplKCk7XHJcbiAgICAgICAgICAgIHN1cGVyLmRlZmluZUV2ZW50cygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbiAgICB0aGlzLk9iamVjdFVwZGF0ZXJWaWV3ID0gT2JqZWN0VXBkYXRlclZpZXc7XHJcbiJdfQ==