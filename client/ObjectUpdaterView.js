/// <reference path="../../Video/typescript-defs/all-definitions.d.ts"/>
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ObjectUpdaterView = (function (_super) {
    __extends(ObjectUpdaterView, _super);
    function ObjectUpdaterView() {
        _super.call(this);
        this.setID("ObjectUpdaterView_");
        this.observationList = new Array();
        var index = 0;
        for (var classType in MyApp.ObjectRouter.observations) {
            for (var updateType in MyApp.ObjectRouter.observations[classType]) {
                var newItem = new Array();
                newItem["classType"] = classType;
                newItem["updateType"] = updateType;
                newItem["counter"] = MyApp.ObjectRouter.observations[classType][updateType].counter;
                this.observationList.push(newItem);
            }
        }
    }
    ObjectUpdaterView.prototype.getView = function () {
        var dataTableComponent = new UIDataTable();
        dataTableComponent.setEditable(true);
        dataTableComponent.addColumn(0, {
            id: "classType",
            header: "Class",
            width: 150,
            sort: "string",
            editor: "text"
        });
        dataTableComponent.addColumn(1, {
            id: "updateType", header: "Update Type", width: 200, sort: "string", editor: "text"
        });
        dataTableComponent.addColumn(2, {
            id: "counter",
            header: "Count",
            width: 150,
            sort: "string",
            editor: "text"
        });
        dataTableComponent.showToolBar = (false);
        dataTableComponent.showAddDeleteColumns = false;
        console.log(JSON.stringify(this.observationList, null, 4));
        dataTableComponent.setList(this.observationList);
        this.addComponent("datatable", dataTableComponent);
        this.componentView = this.createView({
            view: "form", id: this.componentID, elements: [
                this.getComponent("datatable").getView(),
            ]
        });
        return this.componentView;
    };
    ObjectUpdaterView.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        _super.prototype.defineEvents.call(this);
    };
    return ObjectUpdaterView;
}(UIComplexComponent));
this.ObjectUpdaterView = ObjectUpdaterView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT2JqZWN0VXBkYXRlclZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJPYmplY3RVcGRhdGVyVmlldy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3RUFBd0U7Ozs7OztBQUtwRTtJQUFnQyxxQ0FBa0I7SUFJOUM7UUFDSSxpQkFBTyxDQUFDO1FBQ1IsSUFBSSxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBRWpDLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxLQUFLLEVBQU8sQ0FBQztRQUN4QyxJQUFJLEtBQUssR0FBYyxDQUFDLENBQUM7UUFFekIsR0FBRyxDQUFDLENBQUMsSUFBSSxTQUFTLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1lBRXBELEdBQUcsQ0FBQyxDQUFDLElBQUksVUFBVSxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFFaEUsSUFBSSxPQUFPLEdBQWEsSUFBSSxLQUFLLEVBQU8sQ0FBQztnQkFDekMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxHQUFJLFNBQVMsQ0FBQztnQkFDbEMsT0FBTyxDQUFDLFlBQVksQ0FBQyxHQUFHLFVBQVUsQ0FBQztnQkFDbkMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFNLEtBQUssQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQztnQkFDdkYsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFdkMsQ0FBQztRQUNMLENBQUM7SUFDTCxDQUFDO0lBRU0sbUNBQU8sR0FBZDtRQUVJLElBQUksa0JBQWtCLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUUzQyxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRTtZQUM1QixFQUFFLEVBQU0sV0FBVztZQUNuQixNQUFNLEVBQUUsT0FBTztZQUNmLEtBQUssRUFBRyxHQUFHO1lBQ1gsSUFBSSxFQUFJLFFBQVE7WUFDaEIsTUFBTSxFQUFFLE1BQU07U0FDakIsQ0FBQyxDQUFDO1FBQ0gsa0JBQWtCLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRTtZQUM1QixFQUFFLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNO1NBQ3RGLENBQUMsQ0FBQztRQUNILGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUU7WUFDNUIsRUFBRSxFQUFNLFNBQVM7WUFDakIsTUFBTSxFQUFFLE9BQU87WUFDZixLQUFLLEVBQUcsR0FBRztZQUNYLElBQUksRUFBSSxRQUFRO1lBQ2hCLE1BQU0sRUFBRSxNQUFNO1NBQ2pCLENBQUMsQ0FBQztRQUNILGtCQUFrQixDQUFDLFdBQVcsR0FBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2xELGtCQUFrQixDQUFDLG9CQUFvQixHQUFHLEtBQUssQ0FBQztRQUVoRCxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUUzRCxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBRWpELElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLGtCQUFrQixDQUFDLENBQUM7UUFFbkQsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQ0ksSUFBSSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxRQUFRLEVBQUU7Z0JBQy9FLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUMsT0FBTyxFQUFFO2FBQzNDO1NBRWlDLENBQUMsQ0FBQztRQUN4QyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUM5QixDQUFDO0lBRU0sc0NBQVUsR0FBakI7UUFDSSxnQkFBSyxDQUFDLFVBQVUsV0FBRSxDQUFDO1FBQ25CLGdCQUFLLENBQUMsWUFBWSxXQUFFLENBQUM7SUFDekIsQ0FBQztJQUVMLHdCQUFDO0FBQUQsQ0FBQyxBQXRFRCxDQUFnQyxrQkFBa0IsR0FzRWpEO0FBQ0QsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL1ZpZGVvL3R5cGVzY3JpcHQtZGVmcy9hbGwtZGVmaW5pdGlvbnMuZC50c1wiLz5cclxuXHJcblxyXG4gICAgZGVjbGFyZSB2YXIgTXlBcHAgOiBhbnk7XHJcblxyXG4gICAgY2xhc3MgT2JqZWN0VXBkYXRlclZpZXcgZXh0ZW5kcyBVSUNvbXBsZXhDb21wb25lbnQge1xyXG5cclxuICAgICAgICBwdWJsaWMgb2JzZXJ2YXRpb25MaXN0OkFycmF5PGFueT47XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLnNldElEKFwiT2JqZWN0VXBkYXRlclZpZXdfXCIpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vYnNlcnZhdGlvbkxpc3QgPSBuZXcgQXJyYXk8YW55PigpO1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggICAgICAgICAgICA9IDA7XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBjbGFzc1R5cGUgaW4gTXlBcHAuT2JqZWN0Um91dGVyLm9ic2VydmF0aW9ucykge1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHVwZGF0ZVR5cGUgaW4gTXlBcHAuT2JqZWN0Um91dGVyLm9ic2VydmF0aW9uc1tjbGFzc1R5cGVdKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdJdGVtICAgICAgICAgICA9IG5ldyBBcnJheTxhbnk+KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3SXRlbVtcImNsYXNzVHlwZVwiXSAgPSBjbGFzc1R5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3SXRlbVtcInVwZGF0ZVR5cGVcIl0gPSB1cGRhdGVUeXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0l0ZW1bXCJjb3VudGVyXCJdICAgID0gTXlBcHAuT2JqZWN0Um91dGVyLm9ic2VydmF0aW9uc1tjbGFzc1R5cGVdW3VwZGF0ZVR5cGVdLmNvdW50ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vYnNlcnZhdGlvbkxpc3QucHVzaChuZXdJdGVtKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBnZXRWaWV3KCk6YW55IHtcclxuXHJcbiAgICAgICAgICAgIHZhciBkYXRhVGFibGVDb21wb25lbnQgPSBuZXcgVUlEYXRhVGFibGUoKTtcclxuXHJcbiAgICAgICAgICAgIGRhdGFUYWJsZUNvbXBvbmVudC5zZXRFZGl0YWJsZSh0cnVlKTtcclxuICAgICAgICAgICAgZGF0YVRhYmxlQ29tcG9uZW50LmFkZENvbHVtbigwLCB7XHJcbiAgICAgICAgICAgICAgICBpZCAgICA6IFwiY2xhc3NUeXBlXCIsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6IFwiQ2xhc3NcIixcclxuICAgICAgICAgICAgICAgIHdpZHRoIDogMTUwLFxyXG4gICAgICAgICAgICAgICAgc29ydCAgOiBcInN0cmluZ1wiLFxyXG4gICAgICAgICAgICAgICAgZWRpdG9yOiBcInRleHRcIlxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZGF0YVRhYmxlQ29tcG9uZW50LmFkZENvbHVtbigxLCB7XHJcbiAgICAgICAgICAgICAgICBpZDogXCJ1cGRhdGVUeXBlXCIsIGhlYWRlcjogXCJVcGRhdGUgVHlwZVwiLCB3aWR0aDogMjAwLCBzb3J0OiBcInN0cmluZ1wiLCBlZGl0b3I6IFwidGV4dFwiXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBkYXRhVGFibGVDb21wb25lbnQuYWRkQ29sdW1uKDIsIHtcclxuICAgICAgICAgICAgICAgIGlkICAgIDogXCJjb3VudGVyXCIsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6IFwiQ291bnRcIixcclxuICAgICAgICAgICAgICAgIHdpZHRoIDogMTUwLFxyXG4gICAgICAgICAgICAgICAgc29ydCAgOiBcInN0cmluZ1wiLFxyXG4gICAgICAgICAgICAgICAgZWRpdG9yOiBcInRleHRcIlxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZGF0YVRhYmxlQ29tcG9uZW50LnNob3dUb29sQmFyICAgICAgICAgID0gKGZhbHNlKTtcclxuICAgICAgICAgICAgZGF0YVRhYmxlQ29tcG9uZW50LnNob3dBZGREZWxldGVDb2x1bW5zID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeSh0aGlzLm9ic2VydmF0aW9uTGlzdCwgbnVsbCwgNCkpO1xyXG5cclxuICAgICAgICAgICAgZGF0YVRhYmxlQ29tcG9uZW50LnNldExpc3QodGhpcy5vYnNlcnZhdGlvbkxpc3QpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hZGRDb21wb25lbnQoXCJkYXRhdGFibGVcIiwgZGF0YVRhYmxlQ29tcG9uZW50KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50VmlldyA9IHRoaXMuY3JlYXRlVmlldyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlldzogXCJmb3JtXCIsIGlkOiB0aGlzLmNvbXBvbmVudElELCBlbGVtZW50czogW1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0Q29tcG9uZW50KFwiZGF0YXRhYmxlXCIpLmdldFZpZXcoKSxcclxuICAgICAgICAgICAgICAgIF1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50VmlldztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBpbml0aWFsaXplKCkge1xyXG4gICAgICAgICAgICBzdXBlci5pbml0aWFsaXplKCk7XHJcbiAgICAgICAgICAgIHN1cGVyLmRlZmluZUV2ZW50cygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbiAgICB0aGlzLk9iamVjdFVwZGF0ZXJWaWV3ID0gT2JqZWN0VXBkYXRlclZpZXc7XHJcbiJdfQ==