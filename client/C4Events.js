/// <reference path="../../Video/typescript-defs/all-definitions.d.ts"/>
console.log("Loading C4Events.ts ...");
var ObjectChangeType;
(function (ObjectChangeType) {
    ObjectChangeType[ObjectChangeType["Name"] = 0] = "Name";
    ObjectChangeType[ObjectChangeType["Parent"] = 1] = "Parent";
    ObjectChangeType[ObjectChangeType["Map"] = 2] = "Map";
    ObjectChangeType[ObjectChangeType["New"] = 3] = "New";
    ObjectChangeType[ObjectChangeType["Remove"] = 4] = "Remove";
    ObjectChangeType[ObjectChangeType["NewMap"] = 5] = "NewMap";
    ObjectChangeType[ObjectChangeType["Change"] = 6] = "Change";
})(ObjectChangeType || (ObjectChangeType = {}));
this.ObjectChangeType = ObjectChangeType;
class c4e {
}
c4e.ObjectChanged = "ObjectChanged";
c4e.RequestObjectChange = "RequestObjectChange";
this.c4e = c4e;
class EventHandlers {
    constructor(event, callback) {
        this.event = event;
        this.callback = callback;
    }
}
this.EventHandlers = EventHandlers;
class C4EventClass {
    constructor() {
        this.eventEmitter = new EventEmitter();
        this.eventEmitter.setMaxListeners(20);
        this.eventHandlers = new Array();
    }
    handlerExists(event, callback) {
        for (var item in this.eventHandlers) {
            if ((this.eventHandlers[item].event == event) && (this.eventHandlers[item].callback == callback))
                return true;
        }
        return false;
    }
    deleteHandler(event, callback) {
        var index = 0;
        for (var item in this.eventHandlers) {
            if ((this.eventHandlers[item].event == event) && (this.eventHandlers[item].callback == callback)) {
                this.eventHandlers.splice(index, 1);
            }
            index++;
        }
    }
    emit(event, object) {
        C4Event.eventEmitter.emit(event, object);
    }
    on(event, callback) {
        if (this.handlerExists(event, callback))
            return;
        var eventItem = new EventHandlers(event, callback);
        this.eventHandlers.push(eventItem);
        C4Event.eventEmitter.on(event, callback);
    }
    removeListener(event, callback) {
        this.deleteHandler(event, callback);
        C4Event.eventEmitter.removeListener(event, callback);
    }
}
this.C4EventClass = C4EventClass;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzRFdmVudHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJDNEV2ZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3RUFBd0U7QUFLeEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0FBRXZDLElBQUssZ0JBQThGO0FBQW5HLFdBQUssZ0JBQWdCO0lBQUcsdURBQVEsQ0FBQTtJQUFFLDJEQUFVLENBQUE7SUFBRSxxREFBTyxDQUFBO0lBQUUscURBQU8sQ0FBQTtJQUFFLDJEQUFVLENBQUE7SUFBRSwyREFBVSxDQUFBO0lBQUUsMkRBQVUsQ0FBQTtBQUFBLENBQUMsRUFBOUYsZ0JBQWdCLEtBQWhCLGdCQUFnQixRQUE4RTtBQUNuRyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUM7QUFFekM7QUFHQSxDQUFDO0FBRmlCLGlCQUFhLEdBQVUsZUFBZSxDQUFDO0FBQ3ZDLHVCQUFtQixHQUFVLHFCQUFxQixDQUNuRTtBQUNELElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBRWY7SUFHSSxZQUFZLEtBQUssRUFBRSxRQUFRO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzdCLENBQUM7QUFDTCxDQUFDO0FBQUEsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7QUFFcEM7SUFJSTtRQURRLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUV0QyxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksS0FBSyxFQUFPLENBQUM7SUFDMUMsQ0FBQztJQUNNLGFBQWEsQ0FBQyxLQUFLLEVBQUUsUUFBUTtRQUNoQyxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztZQUNsQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDLENBQUM7Z0JBQzdGLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDcEIsQ0FBQztRQUNELE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUNNLGFBQWEsQ0FBQyxLQUFLLEVBQUUsUUFBUTtRQUNoQyxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztZQUNsQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUUvRixJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDeEMsQ0FBQztZQUNELEtBQUssRUFBRSxDQUFDO1FBQ1osQ0FBQztJQUNMLENBQUM7SUFDTSxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQW1CO1FBQ2xDLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBQ00sRUFBRSxDQUFDLEtBQUssRUFBRSxRQUFRO1FBQ3JCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3BDLE1BQU0sQ0FBQztRQUNYLElBQUksU0FBUyxHQUFHLElBQUksYUFBYSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNuQyxPQUFPLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUNNLGNBQWMsQ0FBQyxLQUFLLEVBQUUsUUFBUTtRQUNqQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNwQyxPQUFPLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDekQsQ0FBQztBQUNMLENBQUM7QUFBQyxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9WaWRlby90eXBlc2NyaXB0LWRlZnMvYWxsLWRlZmluaXRpb25zLmQudHNcIi8+XG5cbmRlY2xhcmUgdmFyIEM0RXZlbnQ6YW55O1xuZGVjbGFyZSB2YXIgRXZlbnRFbWl0dGVyOmFueTtcblxuY29uc29sZS5sb2coXCJMb2FkaW5nIEM0RXZlbnRzLnRzIC4uLlwiKTtcblxuZW51bSBPYmplY3RDaGFuZ2VUeXBlIHsgTmFtZSA9IDAsIFBhcmVudCA9IDEsIE1hcCA9IDIsIE5ldyA9IDMsIFJlbW92ZSA9IDQsIE5ld01hcCA9IDUsIENoYW5nZSA9IDZ9XG50aGlzLk9iamVjdENoYW5nZVR5cGUgPSBPYmplY3RDaGFuZ2VUeXBlO1xuXG5jbGFzcyBjNGUge1xuICAgIHB1YmxpYyBzdGF0aWMgT2JqZWN0Q2hhbmdlZDpzdHJpbmcgPSBcIk9iamVjdENoYW5nZWRcIjtcbiAgICBwdWJsaWMgc3RhdGljIFJlcXVlc3RPYmplY3RDaGFuZ2U6c3RyaW5nID0gXCJSZXF1ZXN0T2JqZWN0Q2hhbmdlXCI7XG59XG50aGlzLmM0ZSA9IGM0ZTtcblxuY2xhc3MgRXZlbnRIYW5kbGVycyB7XG4gICAgcHVibGljIGV2ZW50OnN0cmluZztcbiAgICBwdWJsaWMgY2FsbGJhY2s6YW55O1xuICAgIGNvbnN0cnVjdG9yKGV2ZW50LCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmV2ZW50ID0gZXZlbnQ7XG4gICAgICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9XG59dGhpcy5FdmVudEhhbmRsZXJzID0gRXZlbnRIYW5kbGVycztcblxuY2xhc3MgQzRFdmVudENsYXNzIHtcblxuICAgIHB1YmxpYyBldmVudEhhbmRsZXJzOkFycmF5PGFueT47XG4gICAgcHVibGljICBldmVudEVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZXZlbnRFbWl0dGVyLnNldE1heExpc3RlbmVycygyMCk7XG4gICAgICAgIHRoaXMuZXZlbnRIYW5kbGVycyA9IG5ldyBBcnJheTxhbnk+KCk7XG4gICAgfVxuICAgIHB1YmxpYyBoYW5kbGVyRXhpc3RzKGV2ZW50LCBjYWxsYmFjayk6Ym9vbGVhbiB7XG4gICAgICAgIGZvciAodmFyIGl0ZW0gaW4gdGhpcy5ldmVudEhhbmRsZXJzKSB7XG4gICAgICAgICAgICBpZiAoKHRoaXMuZXZlbnRIYW5kbGVyc1tpdGVtXS5ldmVudCA9PSBldmVudCkgJiYgKHRoaXMuZXZlbnRIYW5kbGVyc1tpdGVtXS5jYWxsYmFjayA9PSBjYWxsYmFjaykpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBwdWJsaWMgZGVsZXRlSGFuZGxlcihldmVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgZm9yICh2YXIgaXRlbSBpbiB0aGlzLmV2ZW50SGFuZGxlcnMpIHtcbiAgICAgICAgICAgIGlmICgodGhpcy5ldmVudEhhbmRsZXJzW2l0ZW1dLmV2ZW50ID09IGV2ZW50KSAmJiAodGhpcy5ldmVudEhhbmRsZXJzW2l0ZW1dLmNhbGxiYWNrID09IGNhbGxiYWNrKSkge1xuXG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudEhhbmRsZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHB1YmxpYyBlbWl0KGV2ZW50LCBvYmplY3Q6RXZlbnRNZXNzYWdlKSB7XG4gICAgICAgIEM0RXZlbnQuZXZlbnRFbWl0dGVyLmVtaXQoZXZlbnQsIG9iamVjdCk7XG4gICAgfVxuICAgIHB1YmxpYyBvbihldmVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKHRoaXMuaGFuZGxlckV4aXN0cyhldmVudCwgY2FsbGJhY2spKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgZXZlbnRJdGVtID0gbmV3IEV2ZW50SGFuZGxlcnMoZXZlbnQsIGNhbGxiYWNrKTtcbiAgICAgICAgdGhpcy5ldmVudEhhbmRsZXJzLnB1c2goZXZlbnRJdGVtKTtcbiAgICAgICAgQzRFdmVudC5ldmVudEVtaXR0ZXIub24oZXZlbnQsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgcHVibGljIHJlbW92ZUxpc3RlbmVyKGV2ZW50LCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmRlbGV0ZUhhbmRsZXIoZXZlbnQsIGNhbGxiYWNrKTtcbiAgICAgICAgQzRFdmVudC5ldmVudEVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrKTtcbiAgICB9XG59IHRoaXMuQzRFdmVudENsYXNzID0gQzRFdmVudENsYXNzOyJdfQ==