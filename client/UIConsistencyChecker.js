/// <reference path="../../Video/typescript-defs/all-definitions.d.ts"/>
/// <reference path="../../Video/both/ConsistencyChecker.ts"/>
class UIConsistencyChecker extends UIComplexComponent {
    constructor() {
        super();
        this.setID("ConsistencyChecker_");
        this.checker = new ConsistencyChecker();
    }
    getView() {
        var refreshButton = new UIButton({ label: "Refresh" });
        refreshButton.subscribe("click", this, "refresh");
        this.addComponent("refresh", refreshButton);
        var cleanButton = new UIButton({ label: "Clean" });
        cleanButton.subscribe("click", this, "clean");
        this.addComponent("clean", cleanButton);
        var dataTable = new UIDataTable();
        dataTable.showToolBar = (false);
        dataTable.setEditable(false);
        dataTable.autoColumnConfigure = true;
        this.addComponent("datatable", dataTable);
        this.componentView = this.createView({
            id: this.componentID, rows: [
                { cols: [refreshButton.getView(), cleanButton.getView()] }, dataTable.getView()
            ]
        });
        return this.componentView;
    }
    refreshCheck() {
        var results = this.checker.checkRelationships(false);
        (this.getComponent("datatable")).setList(results);
    }
    cleanup() {
        var results = this.checker.checkRelationships(true);
        (this.getComponent("datatable")).setList(results);
    }
    listen(event, object, publisher) {
        switch (event) {
            case "refresh":
                {
                    this.refreshCheck();
                }
                break;
            case "clean":
                {
                    this.cleanup();
                }
                break;
        }
    }
    defineEvents() {
        this.getComponent("jumpbar").subscribe("refreshButton", this);
        this.getComponent("jumpbar").subscribe("cleanupButton", this);
    }
    initialize() {
        super.initialize();
        super.defineEvents();
        var results = this.checker.checkRelationships(false);
        (this.getComponent("datatable")).setList(results);
    }
    show() {
        var theWindow = new UIPopupWindow("Consistency Checker Results", this);
        theWindow.show();
        return;
    }
}
this.UIConsistencyChecker = UIConsistencyChecker;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVUlDb25zaXN0ZW5jeUNoZWNrZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJVSUNvbnNpc3RlbmN5Q2hlY2tlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3RUFBd0U7QUFDeEUsOERBQThEO0FBRTFELG1DQUFtQyxrQkFBa0I7SUFJakQ7UUFDSSxPQUFPLENBQUM7UUFDUixJQUFJLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDbEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGtCQUFrQixFQUFFLENBQUM7SUFDNUMsQ0FBQztJQUVNLE9BQU87UUFFVixJQUFJLGFBQWEsR0FBRyxJQUFJLFFBQVEsQ0FBQyxFQUFDLEtBQUssRUFBRSxTQUFTLEVBQUMsQ0FBQyxDQUFDO1FBQ3JELGFBQWEsQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUU1QyxJQUFJLFdBQVcsR0FBRyxJQUFJLFFBQVEsQ0FBQyxFQUFDLEtBQUssRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO1FBQ2pELFdBQVcsQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQztRQUV4QyxJQUFJLFNBQVMsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBRWxDLFNBQVMsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoQyxTQUFTLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdCLFNBQVMsQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUM7UUFDckMsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFMUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQ0ksRUFBRSxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFFO2dCQUM3RCxFQUFDLElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsRUFBRSxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBQyxFQUFFLFNBQVMsQ0FBQyxPQUFPLEVBQUU7YUFDaEY7U0FDaUMsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQzlCLENBQUM7SUFFTSxZQUFZO1FBQ2YsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN0QyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVNLE9BQU87UUFDVixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQVksRUFBRSxNQUFVLEVBQUUsU0FBcUI7UUFDekQsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNaLEtBQUssU0FBUztnQkFDZCxDQUFDO29CQUNHLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztnQkFDeEIsQ0FBQztnQkFDRyxLQUFLLENBQUM7WUFDVixLQUFLLE9BQU87Z0JBQ1osQ0FBQztvQkFDRyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQ25CLENBQUM7Z0JBQ0csS0FBSyxDQUFDO1FBQ2QsQ0FBQztJQUNMLENBQUM7SUFFTSxZQUFZO1FBQ2YsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzlELElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRU0sVUFBVTtRQUNiLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNuQixLQUFLLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDckIsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN0QyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVNLElBQUk7UUFDUCxJQUFJLFNBQVMsR0FBRyxJQUFJLGFBQWEsQ0FBQyw2QkFBNkIsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN2RSxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDakIsTUFBTSxDQUFDO0lBQ1gsQ0FBQztBQUNMLENBQUM7QUFDRCxJQUFJLENBQUMsb0JBQW9CLEdBQUcsb0JBQW9CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vVmlkZW8vdHlwZXNjcmlwdC1kZWZzL2FsbC1kZWZpbml0aW9ucy5kLnRzXCIvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vVmlkZW8vYm90aC9Db25zaXN0ZW5jeUNoZWNrZXIudHNcIi8+XHJcblxyXG4gICAgY2xhc3MgVUlDb25zaXN0ZW5jeUNoZWNrZXIgZXh0ZW5kcyBVSUNvbXBsZXhDb21wb25lbnQge1xyXG5cclxuICAgICAgICBwdWJsaWMgY2hlY2tlcjpDb25zaXN0ZW5jeUNoZWNrZXI7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLnNldElEKFwiQ29uc2lzdGVuY3lDaGVja2VyX1wiKTtcclxuICAgICAgICAgICAgdGhpcy5jaGVja2VyID0gbmV3IENvbnNpc3RlbmN5Q2hlY2tlcigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGdldFZpZXcoKTphbnkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHJlZnJlc2hCdXR0b24gPSBuZXcgVUlCdXR0b24oe2xhYmVsOiBcIlJlZnJlc2hcIn0pO1xyXG4gICAgICAgICAgICByZWZyZXNoQnV0dG9uLnN1YnNjcmliZShcImNsaWNrXCIsIHRoaXMsIFwicmVmcmVzaFwiKTtcclxuICAgICAgICAgICAgdGhpcy5hZGRDb21wb25lbnQoXCJyZWZyZXNoXCIsIHJlZnJlc2hCdXR0b24pO1xyXG5cclxuICAgICAgICAgICAgdmFyIGNsZWFuQnV0dG9uID0gbmV3IFVJQnV0dG9uKHtsYWJlbDogXCJDbGVhblwifSk7XHJcbiAgICAgICAgICAgIGNsZWFuQnV0dG9uLnN1YnNjcmliZShcImNsaWNrXCIsIHRoaXMsIFwiY2xlYW5cIik7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkQ29tcG9uZW50KFwiY2xlYW5cIiwgY2xlYW5CdXR0b24pO1xyXG5cclxuICAgICAgICAgICAgdmFyIGRhdGFUYWJsZSA9IG5ldyBVSURhdGFUYWJsZSgpO1xyXG5cclxuICAgICAgICAgICAgZGF0YVRhYmxlLnNob3dUb29sQmFyID0gKGZhbHNlKTtcclxuICAgICAgICAgICAgZGF0YVRhYmxlLnNldEVkaXRhYmxlKGZhbHNlKTtcclxuICAgICAgICAgICAgZGF0YVRhYmxlLmF1dG9Db2x1bW5Db25maWd1cmUgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmFkZENvbXBvbmVudChcImRhdGF0YWJsZVwiLCBkYXRhVGFibGUpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jb21wb25lbnRWaWV3ID0gdGhpcy5jcmVhdGVWaWV3KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogdGhpcy5jb21wb25lbnRJRCwgcm93czogW1xyXG4gICAgICAgICAgICAgICAgICAgIHtjb2xzOiBbcmVmcmVzaEJ1dHRvbi5nZXRWaWV3KCksIGNsZWFuQnV0dG9uLmdldFZpZXcoKV19LCBkYXRhVGFibGUuZ2V0VmlldygpXHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50VmlldztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyByZWZyZXNoQ2hlY2soKSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHRzID0gdGhpcy5jaGVja2VyLmNoZWNrUmVsYXRpb25zaGlwcyhmYWxzZSk7XHJcbiAgICAgICAgICAgICg8VUlEYXRhVGFibGU+ICh0aGlzLmdldENvbXBvbmVudChcImRhdGF0YWJsZVwiKSkpLnNldExpc3QocmVzdWx0cyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgY2xlYW51cCgpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdHMgPSB0aGlzLmNoZWNrZXIuY2hlY2tSZWxhdGlvbnNoaXBzKHRydWUpO1xyXG4gICAgICAgICAgICAoPFVJRGF0YVRhYmxlPiAodGhpcy5nZXRDb21wb25lbnQoXCJkYXRhdGFibGVcIikpKS5zZXRMaXN0KHJlc3VsdHMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGxpc3RlbihldmVudDpzdHJpbmcsIG9iamVjdDphbnksIHB1Ymxpc2hlcjpVSUNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwicmVmcmVzaFwiIDpcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2hDaGVjaygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImNsZWFuXCIgOlxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYW51cCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgZGVmaW5lRXZlbnRzKCkge1xyXG4gICAgICAgICAgICB0aGlzLmdldENvbXBvbmVudChcImp1bXBiYXJcIikuc3Vic2NyaWJlKFwicmVmcmVzaEJ1dHRvblwiLCB0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5nZXRDb21wb25lbnQoXCJqdW1wYmFyXCIpLnN1YnNjcmliZShcImNsZWFudXBCdXR0b25cIiwgdGhpcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgaW5pdGlhbGl6ZSgpIHtcclxuICAgICAgICAgICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xyXG4gICAgICAgICAgICBzdXBlci5kZWZpbmVFdmVudHMoKTtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdHMgPSB0aGlzLmNoZWNrZXIuY2hlY2tSZWxhdGlvbnNoaXBzKGZhbHNlKTtcclxuICAgICAgICAgICAgKDxVSURhdGFUYWJsZT4gKHRoaXMuZ2V0Q29tcG9uZW50KFwiZGF0YXRhYmxlXCIpKSkuc2V0TGlzdChyZXN1bHRzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzaG93KCkge1xyXG4gICAgICAgICAgICB2YXIgdGhlV2luZG93ID0gbmV3IFVJUG9wdXBXaW5kb3coXCJDb25zaXN0ZW5jeSBDaGVja2VyIFJlc3VsdHNcIiwgdGhpcyk7XHJcbiAgICAgICAgICAgIHRoZVdpbmRvdy5zaG93KCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGlzLlVJQ29uc2lzdGVuY3lDaGVja2VyID0gVUlDb25zaXN0ZW5jeUNoZWNrZXI7XHJcbiJdfQ==