/// <reference path="../both/TimeMachine.ts"/>
console.log("ServerCall.ts is loading");
Meteor.startup(function () {
    console.log("ServerCall.ts startup is running");
    if (Meteor.isServer) {
        Meteor.methods({
            getListForTarget: function (theObject) {
                var factoryObject = Factory.CreateProxyInstance(theObject.classType);
                //       factoryObject.getRelatedObject(theObject);
            },
            cleanDB: function () {
                var timeM = new TimeMachineClass();
                timeM.cleanDBServer();
            },
            createAssessmentDetails: function (scenario, domain) {
                AppLog.info("inside meteor methods calling createAssessmentDetail");
                // var theTree = AssessementClass.createAssessmentDetailsServer(scenario,domain)
                // return theTree;
            },
            removeObject: function (theObject) {
                var factoryObject = Factory.CreateProxyInstance(theObject.classType);
                factoryObject.removeServer(theObject);
            },
            removeMapReference: function (theObject) {
                var factoryObject = Factory.CreateProxyInstance(ClassType.MAP);
                factoryObject.removeReferenceServer(theObject.id1, theObject.id2);
            },
            capabilitySafeRemoval: function (treeNode) {
                var factoryObject = Factory.CreateProxyInstanceTree("capability");
                factoryObject.removeServer(treeNode);
            },
            capabilityRemoveSet: function (theList, domain) {
                var factoryObject = Factory.CreateProxyInstanceTree("capability");
                factoryObject.removeSet(theList);
            },
            dimensionSafeRemoval: function (treeNode) {
                var factoryObject = Factory.CreateProxyInstanceTree("dimension");
                factoryObject.removeServer(treeNode);
            },
            removeMap: function (id) {
                var mapObject = Factory.CreateProxyInstance(ClassType.MAP);
                mapObject.removeReferenceServer(id, null);
                ;
            },
            updateTechAssessment: function (theID, techValue) {
                try {
                }
                catch (e) {
                    AppLog.error("Error Updating Assessment", e);
                }
            },
            createTransitions: function (domain) {
                //TransitionClass.createTransitionsServer(domain);
            },
        });
        var Fiber = Npm.require('fibers');
        process.on('uncaughtException', function (err) {
            AppLog.error(err.message, err);
            Fiber(function () {
                //      Logs.insert({ ... }) // Logs is a collection
            }).run();
            process.exit(1);
        });
    }
});
//# sourceMappingURL=data:application/json;base64,