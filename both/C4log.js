/// <reference path="../typescript-defs/all-definitions.d.ts"/>
/// <reference path="../typescript-defs/stack-trace.d.ts"/>
console.log("Loading AppLog.ts ...");
var AppLog = (function () {
    function AppLog() {
    }
    AppLog.start = function () {
        return true;
    };
    AppLog.stackTrace = function () {
        var err = new Error();
        return err["stack"];
    };
    AppLog.printThis = function (theObject) {
        console.log(JSON.stringify(theObject, null, 7));
    };
    AppLog.defaultExceptionHandler = function (msg, url, line, col, error) {
        var extra = !col ? '' : '\ncolumn: ' + col;
        extra += !error ? '' : '\nerror: ' + error;
        var message = "Error: " + msg + "<br> url:" + url + "<br> nline:" + line + "<br>" + extra;
        webix.modalbox({
            title: "Uncaught Exception Eerror",
            buttons: ["ok", "Not OK"],
            text: message,
            width: "800px",
        });
        AppLog.error(msg, error, {
            msg: msg,
            url: url,
            line: line,
            col: col,
            error: col
        });
        var suppressErrorAlert = true;
    };
    AppLog.record = function (message, error, object) {
        AppLog.log("record", message, error, object, true);
    };
    AppLog.error = function (message, error, object) {
        if (typeof window != "undefined") {
            UI.Error(message);
        }
        AppLog.log("error", message, error, object);
        debugger;
    };
    AppLog.info = function (message, error, object) {
        if (AppLog.infoReport)
            AppLog.log("info", message, error, object);
    };
    AppLog.GPSReturn = function (result) {
        console.error("GPSReturn");
        console.error(result);
    };
    AppLog.GPSReturnError = function (result) {
        console.error("GPSReturn Error");
        console.error("Error");
        console.error(result);
    };
    AppLog.CreateGoodStack = function (stack) {
        console.error("StackTrace");
        console.error(stack);
        var stackFrame = new StackFrame(stack[0].functionName, [], stack[0].fileName, stack[0].lineNumber, stack[0].columnNumber);
        /*
         AppLog.gps.getMappedLocation(stackFrame).then(
         AppLog.GPSReturn,
         AppLog.GPSReturnError);


         AppLog.gps.getMappedLocation(stack[0]).then(
         AppLog.GPSReturn,
         AppLog.GPSReturnError);
         */
    };
    AppLog.log = function (type, message, error, object, database) {
        // var caller = arguments.callee.caller.toString();
        if (database === void 0) { database = false; }
        // if (!AppLog.gps) {
        //    AppLog.gps = new StackTraceGPS();
        // }
        if (error) {
            var theStack = error["stack"];
        }
        else
            theStack = "";
        if (type == "info" && !AppLog.info)
            return;
        var description = type + " " + message + " " + error;
        /*
         if (window) {
         var theNavigator = navigator
         }
         else theNavigator = null;
         */
        var theNavigator = null;
        if (!AppLog.noDB)
            AppLog.Add(type, message, error, object, theStack, theNavigator);
        else if ((AppLog.errorOnlyDB && type == "error") || database)
            AppLog.Add(type, message, error, object, theStack, theNavigator);
        //console.error("Navigator : "+ AppLog.prettyPrint(theNavigator));
        //console.error("Caller : " + caller)
        console.error(description);
        if (type == "error") {
            console.error(error);
            console.error(AppLog.prettyPrint(theStack));
        }
        if (object)
            if (AppLog.printObjects)
                console.error(AppLog.prettyPrint(object));
    };
    AppLog.StackToString = function (theStack) {
        var theString = "";
        for (var item in theStack) {
            theString += theStack[item] + "\n";
        }
        return theString;
    };
    AppLog.PrintObject = function (object) {
        return JSON.stringify(object, null, 4);
    };
    AppLog.cast = function (theObject) {
        return theObject;
    };
    AppLog.MakeJSON = function (object) {
        return JSON.stringify(JSON.decycle(object), null, 4);
    };
    AppLog.Add = function (type, message, error, object, caller, browser) {
        var theDescription = type + " " + message + " " + error;
        var objectArray = new Array();
        try {
            if (error) {
                objectArray[0] = error;
                var errorJson = AppLog.MakeJSON(objectArray);
            }
            else {
                objectArray[0] = "No Error";
                var errorJson = AppLog.MakeJSON(objectArray);
            }
        }
        catch (e) {
        }
        try {
            if (object) {
                objectArray[0] = object;
                var objectJson = AppLog.MakeJSON(objectArray);
            }
            else {
                objectArray[0] = "No Object";
                var objectJson = AppLog.MakeJSON(objectArray);
            }
        }
        catch (e) {
        }
        try {
            if (browser) {
                objectArray[0] = browser;
                var browserJson = AppLog.MakeJSON((objectArray));
            }
            else {
                objectArray[0] = "No Object";
                browserJson = AppLog.MakeJSON((objectArray));
            }
        }
        catch (e) {
        }
        try {
            C4logDB.insert({
                type: type,
                message: message,
                description: theDescription,
                errorObject: errorJson,
                object: objectJson,
                caller: caller,
                browser: browserJson
            });
        }
        catch (e) {
            console.log("Error Logging C4 Error in DB");
            return;
        }
    };
    AppLog.prettyPrint = function (obj, indent) {
        if (indent === void 0) { indent = 0; }
        if (!obj)
            return "null";
        var toString = Object.prototype.toString, newLine = "<br>", space = "&nbsp;", tab = 8, buffer = "", 
        //Second argument is indent
        //For better performance, Cache indentStr for a given indent.
        indentStr = (function (n) {
            var str = "";
            while (n--) {
                str += space;
            }
            return str;
        })(indent);
        if (!obj || (typeof obj != "object" && typeof obj != "function")) {
            //any non-object ( Boolean, String, Number), null, undefined, NaN
            buffer += obj;
        }
        else if (toString.call(obj) == "[object Date]") {
            buffer += "[Date] " + obj;
        }
        else if (toString.call(obj) == "[object RegExp") {
            buffer += "[RegExp] " + obj;
        }
        else if (toString.call(obj) == "[object Function]") {
            buffer += "[Function] " + obj;
        }
        else if (toString.call(obj) == "[object Array]") {
            var idx = 0, len = obj.length;
            buffer += "[" + newLine;
            while (idx < len) {
                buffer += [
                    indentStr, idx, ": ",
                    AppLog.prettyPrint(obj[idx], indent + tab)
                ].join("");
                buffer += "<br>";
                idx++;
            }
            buffer += indentStr + "]";
        }
        else {
            var prop;
            buffer += "{" + newLine;
            for (prop in obj) {
                buffer += [
                    indentStr, prop, ": ",
                    AppLog.prettyPrint(obj[prop], indent + tab)
                ].join("");
                buffer += newLine;
            }
            buffer += indentStr + "}";
        }
        return buffer;
    };
    AppLog.infoReport = true;
    AppLog.noDB = true;
    AppLog.errorOnlyDB = true;
    AppLog.printObjects = false;
    AppLog.initialize = AppLog.start();
    AppLog.gps = false;
    return AppLog;
}());
this.AppLog = AppLog;
this.jobLogger = function (opts) {
    AppLog.info("Job Logger Message : " + opts.message + " Level : " + opts.level, new Error(), {
        level: opts.level,
        message: opts.message,
        tags: opts.tag
    });
};
var VideoApp = (function () {
    function VideoApp() {
    }
    VideoApp.assert = function (condition, message, error, object) {
        if (!condition) {
            AppLog.error("Assertion " + message, error, object);
            debugger;
            message = message || "Assertion failed";
            if (typeof Error !== "undefined") {
                throw new Error(message);
            }
            throw message; // Fallback
        }
    };
    VideoApp.EJSONcast = function (theObject) {
        return theObject;
    };
    return VideoApp;
}());
this.VideoApp = VideoApp;
//# sourceMappingURL=data:application/json;base64,