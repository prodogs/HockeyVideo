/// <reference path="../typescript-defs/all-definitions.d.ts"/>
console.log("Loading MetaData.ts....");
class RelationshipKey {
}
RelationshipKey.SUBJECT_TREE = "SUBJECT_TREE";
this.RelationshipKey = RelationshipKey;
class ClassType {
}
ClassType.MAP = "map";
ClassType.COUNTER = "counter";
this.ClassType = ClassType;
var ClassStructureTypes;
(function (ClassStructureTypes) {
    ClassStructureTypes[ClassStructureTypes["Basic"] = 0] = "Basic";
    ClassStructureTypes[ClassStructureTypes["Tree"] = 1] = "Tree";
})(ClassStructureTypes || (ClassStructureTypes = {}));
this.ClassStructureTypes = ClassStructureTypes;
class ClassMetaData {
    static cast(object) {
        return object;
    }
    fromJSONValue(doc) {
        // default implementation
        for (var properties in doc) {
            this[properties] = doc[properties];
        }
    }
    toString() { return "no string"; }
    equals(other) {
        if (!(other instanceof ClassMetaData))
            return false;
        if (EJSON.stringify(this) == EJSON.stringify(other))
            return true;
        return false;
    }
    typeName() {
        return "ClassMetaData";
    }
    clone() {
        var newObject = new ClassMetaData();
        newObject.fromJSONValue(this);
        return newObject;
    }
}
this.ClassMetaData = ClassMetaData;
var RelationshipType;
(function (RelationshipType) {
    RelationshipType[RelationshipType["Tree"] = 0] = "Tree";
    RelationshipType[RelationshipType["OneWay"] = 1] = "OneWay";
    RelationshipType[RelationshipType["TwoWay"] = 2] = "TwoWay";
})(RelationshipType || (RelationshipType = {}));
this.RelationshipType = RelationshipType;
var RelationshipPossible;
(function (RelationshipPossible) {
    RelationshipPossible[RelationshipPossible["Add"] = 0] = "Add";
    RelationshipPossible[RelationshipPossible["Replace"] = 1] = "Replace";
    RelationshipPossible[RelationshipPossible["Remove"] = 3] = "Remove";
    RelationshipPossible[RelationshipPossible["NotAllowed"] = 4] = "NotAllowed";
    RelationshipPossible[RelationshipPossible["AlreadyExists"] = 5] = "AlreadyExists";
})(RelationshipPossible || (RelationshipPossible = {}));
this.RelationshipPossible = RelationshipPossible;
class RelationshipLabel {
    clone() {
        var newObject = new RelationshipLabel();
        newObject.fromJSONValue(this);
        return newObject;
    }
    fromJSONValue(doc) {
        this.label = doc["label"];
        this.optional = doc["optional"];
    }
    toJSONValue() {
        return {
            "label": this.label, "optional": this.optional
        };
    }
    typeName() {
        return "RelationshipLabel";
    }
    equals(other) {
        if (!(other instanceof RelationshipLabel))
            return false;
        if (EJSON.stringify(this) == EJSON.stringify(other))
            return true;
        return false;
    }
}
this.RelationshipLabel = RelationshipLabel;
class RelationshipLabels {
    clone() {
        var newObject = new RelationshipLabels();
        newObject.fromJSONValue(this);
        return newObject;
    }
    toJSONValue() {
        var valueArray = new Array();
        for (var item in this.labels) {
            var value = this.labels[item].toJSONValue();
            valueArray.push(value);
        }
        return {
            labels: this.labels
        };
    }
    fromJSONValue(doc) {
        this.labels = new Array();
        for (var item in doc.labels) {
            var label = new RelationshipLabel();
            label.fromJSONValue(doc.labels[item]);
            this.labels.push(label);
        }
    }
    typeName() {
        return "RelationshipLabels";
    }
    equals(other) {
        if (!(other instanceof RelationshipLabels))
            return false;
        if (EJSON.stringify(this) == EJSON.stringify(other))
            return true;
        return false;
    }
}
this.RelationshipLabels = RelationshipLabels;
class RelationshipMetaData {
    toJSONValue() {
        return {
            from: this.from,
            to: this.to,
            description: this.description,
            label: this.label,
            relationshipType: this.relationshipType,
            relationshipLabels: this.relationshipLabels.toJSONValue(),
            useOnlyRelationLabels: this.useOnlyRelationLabels,
            sameObjectEnumeration: this.sameObjectEnumeration,
            sameClassEnumeration: this.sameClassEnumeration,
            sameObjectReverseAllowed: this.sameObjectReverseAllowed,
            routing: this.routing,
            curve: this.curve,
            maxLinks: this.maxLinks,
            visual: this.visual
        };
    }
    fromJSONValue(doc) {
        this["_id"] = doc._id;
        this["theID"] = doc._id;
        this.to = doc.to;
        this.from = doc.from;
        this.description = doc.description;
        this.label = doc.label;
        this.relationshipType = doc.relationshipType;
        this.relationshipLabels = new RelationshipLabels();
        this.relationshipLabels.fromJSONValue(doc.relationshipLabels);
        this.useOnlyRelationLabels = doc.useOnlyRelationLabels;
        this.sameObjectEnumeration = doc.sameObjectEnumeration;
        this.routing = doc.routing;
        this.curve = doc.routing;
        this.maxLinks = doc.maxLinks;
        this.visual = doc.visual;
        this.isPersistant = doc.isPersistant;
    }
    toString() { return "no string"; }
    equals(other) {
        if (!(other instanceof RelationshipMetaData))
            return false;
        if (EJSON.stringify(this) == EJSON.stringify(other))
            return true;
        return false;
    }
    typeName() {
        return "RelationshipMetaData";
    }
    clone() {
        var newObject = new RelationshipMetaData();
        newObject.fromJSONValue(this);
        return newObject;
    }
}
this.RelationshipMetaData = RelationshipMetaData;
var ProxyClassTypes;
(function (ProxyClassTypes) {
    ProxyClassTypes[ProxyClassTypes["Basic"] = 0] = "Basic";
    ProxyClassTypes[ProxyClassTypes["Tree"] = 1] = "Tree";
    ProxyClassTypes[ProxyClassTypes["Map"] = 2] = "Map";
    ProxyClassTypes[ProxyClassTypes["Folder"] = 3] = "Folder";
    ProxyClassTypes[ProxyClassTypes["Library"] = 4] = "Library";
})(ProxyClassTypes || (ProxyClassTypes = {}));
this.ProxyClassTypes = ProxyClassTypes;
var RoutingType;
(function (RoutingType) {
    RoutingType[RoutingType["Orthogonal"] = 0] = "Orthogonal";
    RoutingType[RoutingType["Normal"] = 1] = "Normal";
    RoutingType[RoutingType["AvoidsNodes"] = 2] = "AvoidsNodes";
})(RoutingType || (RoutingType = {}));
this.RoutingType = RoutingType;
var CurveType;
(function (CurveType) {
    CurveType[CurveType["JumpOver"] = 0] = "JumpOver";
    CurveType[CurveType["Bezier"] = 1] = "Bezier";
})(CurveType || (CurveType = {}));
this.CurveType = CurveType;
//# sourceMappingURL=data:application/json;base64,