/// <reference path="../typescript-defs/all-definitions.d.ts"/>
console.log("Loading TimeMachine.ts ...");
//endregion
class TimeMachineClass {
    constructor() {
        this.objectCount = 0;
        this.checkPointPrefix = "Time Machine Checkpoint ";
        this.versionDate = Date();
        this.versionID = Random.id();
    }
    restore(id) {
        Meteor.call("loadTimeMachine", id);
    }
    getVersion() {
        return "Version ID = " + this.versionID + " Date = " + this.getDate().toLocaleDateString;
    }
    getDate() {
        return this.versionDate;
    }
    getVersionName() {
        return this.checkPointPrefix + this.getDate().toDateString() + " " + this.getDate().toTimeString();
    }
    Checkpoint() {
        Meteor.call("checkpointTimeMachine");
    }
    checkPointServer(checkPointPrefix) {
        /*
           if (checkPointPrefix) {
               this.checkPointPrefix = checkPointPrefix
           }
           AppLog.info("Time Machine SaveAll Called = " + this.getVersion());
           try {
               this.jsonArray = new Array<any>();
               for (var item in Factory.collectionArray) {
                   var objectSpec = (Factory.collectionArray[item]);
                   if (objectSpec.timeCapsule) {
                       this.pushCollection(objectSpec.classType);
                   }
               }
               var capsuleString:string = EJSON.stringify(VideoApp.EJSONcast(this.jsonArray));
               var timeMachineProxy:any = Factory.CreateProxyInstance(ClassType.TIME_MACHINE);
               this.versionDate = new Date();
               var checkPointObject:any = {
                   name: this.getVersionName(),
                   versionID       : this.versionID,
                   objectCount     : this.objectCount,
                   date: this.versionDate,
                   jsonArray: capsuleString
               };
               timeMachineProxy.addNewObject(checkPointObject);
           } catch (e) { AppLog.error("Error While Saving All in TimeMachine", e);}
           */
    }
    pushCollection(classType) {
        try {
            var objectProxy = Factory.CreateProxyInstance(classType);
            var records = objectProxy.getList(false);
            this.objectCount += records.length;
            // var stringy = EJSON.stringify(records);
            this.jsonArray.push({ classType: classType, records: records });
        }
        catch (e) {
            AppLog.error("Error Pushing Collection for ClassType = " + classType, e);
        }
    }
    restoreServer(id) {
        AppLog.info("TimeMachine RestoreAll Called with ID = " + id);
        this.checkPointServer("Checkpoint B4 restore ");
        this.CleanDB();
        // var timeMachineProxy = Factory.CreateProxyInstance(ClassType.TIME_MACHINE);
        AppLog.info("Time Machine Getting Capsule to restore");
        try {
            this.capsule = timeMachineProxy.getOne(id);
        }
        catch (e) {
            AppLog.error("Error Getting TimeMachine Capsule for id = " + id, e);
        }
        if (!this.capsule) {
            AppLog.error("Could Not Find TimeMachine Capsule for ID " + id);
            return;
        }
        this.capsuleArray = EJSON.parse(this.capsule.jsonArray);
        AppLog.info("Time Machine Loading Capsule Collections");
        for (var i = 0; i < this.capsuleArray.length; i++) {
            this.popCollection(this.capsuleArray[i]);
        }
    }
    popCollection(theRecord) {
        var objectProxy = Factory.CreateProxyInstance(theRecord.classType);
        AppLog.info("Time Machine Restoring Collection for " + theRecord.classType);
        var classType = theRecord.classType;
        if (!objectProxy) {
            AppLog.error("Could Not Find Collection for Class = " + classType);
            return;
        }
        for (var i = 0; i < theRecord.records.length; i++) {
            try {
                objectProxy.restoreObject(theRecord.records[i]);
            }
            catch (e) {
                AppLog.error("Time Machine Error Inserting Object", e, theRecord.records[i]);
            }
        }
    }
    CleanDB() {
        Meteor.call("cleanDB");
    }
    cleanDBServer() {
        AppLog.record("Cleaning Database From Server", new Error(), null);
        this.checkPointServer("CleanDB CheckPoint ");
        for (var item in Factory.collectionArray) {
            var objectSpec = Factory.collectionArray[item];
            if (objectSpec.timeCapsule) {
                var objectProxy = Factory.CreateProxyInstance(objectSpec.classType);
                objectProxy.removeAll();
            }
        }
    }
}
this.TimeMachineClass = TimeMachineClass;
//# sourceMappingURL=data:application/json;base64,